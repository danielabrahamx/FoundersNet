{
    "name": "PredictionMarket",
    "structs": {
        "BetStruct": [
            {
                "name": "bet_id",
                "type": "uint64"
            },
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "bettor",
                "type": "address"
            },
            {
                "name": "outcome",
                "type": "bool"
            },
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "claimed",
                "type": "bool"
            }
        ],
        "EventStruct": [
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "end_time",
                "type": "uint64"
            },
            {
                "name": "resolved",
                "type": "bool"
            },
            {
                "name": "outcome",
                "type": "bool"
            },
            {
                "name": "total_yes_bets",
                "type": "uint64"
            },
            {
                "name": "total_no_bets",
                "type": "uint64"
            },
            {
                "name": "total_yes_amount",
                "type": "uint64"
            },
            {
                "name": "total_no_amount",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_application",
            "args": [
                {
                    "type": "address",
                    "name": "admin",
                    "desc": "The account that will have admin privileges"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the application\nSets the admin address and initializes counters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_event",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "end_time"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new prediction event (admin only)\nArgs:     name: Name/description of the event     end_time: Unix timestamp when betting ends      Returns:     The event ID of the newly created event      Raises:     Error if caller is not admin     Error if end_time is not in the future",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "place_bet",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                },
                {
                    "type": "bool",
                    "name": "outcome"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Place a bet on an event\nThis method expects to be called as part of an atomic transaction group where the first transaction is a payment to the application account.\nArgs:     event_id: ID of the event to bet on     outcome: True for YES, False for NO     payment: Payment transaction with the bet amount      Raises:     Error if event doesn't exist     Error if event is already resolved     Error if betting period has ended     Error if payment amount is 0     Error if payment receiver is not the application account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resolve_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                },
                {
                    "type": "bool",
                    "name": "outcome"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resolve an event with the final outcome (admin only)\nAdmin can resolve early if needed (no endTime check)\nArgs:     event_id: ID of the event to resolve     outcome: True for YES, False for NO      Raises:     Error if caller is not admin     Error if event doesn't exist     Error if event is already resolved",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_winnings",
            "args": [
                {
                    "type": "uint64",
                    "name": "bet_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim winnings for a winning bet\nSends payout from app account to the bettor via inner transaction\nArgs:     bet_id: ID of the bet to claim      Raises:     Error if bet doesn't exist     Error if caller is not the bettor     Error if winnings already claimed     Error if event not resolved     Error if bet did not win",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_bets",
            "args": [
                {
                    "type": "address",
                    "name": "user",
                    "desc": "Address of the user"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,address,bool,uint64,bool)[]",
                "desc": "Array of Bet structs for the user"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all bets for a user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_bets",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total bet counts for an event\nArgs:     event_id: ID of the event      Returns:     Tuple of (yes_bets, no_bets)      Raises:     Error if event doesn't exist",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id"
                }
            ],
            "returns": {
                "type": "(uint64,string,uint64,bool,bool,uint64,uint64,uint64,uint64)",
                "struct": "EventStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get event details\nArgs:     event_id: ID of the event      Returns:     Event struct with all event data      Raises:     Error if event doesn't exist",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_all_events",
            "args": [],
            "returns": {
                "type": "(uint64,string,uint64,bool,bool,uint64,uint64,uint64,uint64)[]",
                "desc": "Array of all Event structs"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all events",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_balance",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Current balance of the application account in microAlgos"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract/app account balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergency_withdraw",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency withdraw function for admin\nTransfers entire app balance to admin account\nRaises:     Error if caller is not admin",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_admin",
            "args": [],
            "returns": {
                "type": "address",
                "desc": "Address of the admin account"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get the admin address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event_counter",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Number of events created"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get the current event counter",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_bet_counter",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Number of bets placed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get the current bet counter",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Algorand-based prediction market smart contract\n    \n    Features:\n    - Admin can create prediction events\n    - Users can place bets (YES/NO) with ALGO\n    - Admin can resolve events (with early resolution support)\n    - Winners can claim proportional payouts\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "event_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXZlbnRfY291bnRlcg=="
                },
                "bet_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmV0X2NvdW50ZXI="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "events": {
                    "keyType": "uint64",
                    "valueType": "EventStruct",
                    "prefix": "ZXZlbnRz"
                },
                "bets": {
                    "keyType": "uint64",
                    "valueType": "BetStruct",
                    "prefix": "YmV0cw=="
                },
                "user_bets": {
                    "keyType": "address",
                    "valueType": "uint64[]",
                    "prefix": "dXNlcl9iZXRz"
                },
                "event_bets": {
                    "keyType": "uint64",
                    "valueType": "uint64[]",
                    "prefix": "ZXZlbnRfYmV0cw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        470
                    ],
                    "errorMessage": "Bet amount must be greater than 0"
                },
                {
                    "pc": [
                        894
                    ],
                    "errorMessage": "Bet did not win"
                },
                {
                    "pc": [
                        806
                    ],
                    "errorMessage": "Bet does not exist"
                },
                {
                    "pc": [
                        278
                    ],
                    "errorMessage": "End time must be in the future"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "Event already resolved"
                },
                {
                    "pc": [
                        462
                    ],
                    "errorMessage": "Event betting period has ended"
                },
                {
                    "pc": [
                        422,
                        723,
                        1128,
                        1164
                    ],
                    "errorMessage": "Event does not exist"
                },
                {
                    "pc": [
                        452
                    ],
                    "errorMessage": "Event is already resolved"
                },
                {
                    "pc": [
                        865
                    ],
                    "errorMessage": "Event not resolved yet"
                },
                {
                    "pc": [
                        1394
                    ],
                    "errorMessage": "No balance to withdraw"
                },
                {
                    "pc": [
                        826
                    ],
                    "errorMessage": "Not the bet owner"
                },
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "Only admin can create events"
                },
                {
                    "pc": [
                        1384
                    ],
                    "errorMessage": "Only admin can emergency withdraw"
                },
                {
                    "pc": [
                        714
                    ],
                    "errorMessage": "Only admin can resolve events"
                },
                {
                    "pc": [
                        477
                    ],
                    "errorMessage": "Payment must be to app account"
                },
                {
                    "pc": [
                        841
                    ],
                    "errorMessage": "Winnings already claimed"
                },
                {
                    "pc": [
                        1365,
                        1389
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        270,
                        712,
                        1379,
                        1435
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        481,
                        804,
                        1066,
                        1456
                    ],
                    "errorMessage": "check self.bet_counter exists"
                },
                {
                    "pc": [
                        817,
                        1077
                    ],
                    "errorMessage": "check self.bets entry exists"
                },
                {
                    "pc": [
                        562
                    ],
                    "errorMessage": "check self.event_bets entry exists"
                },
                {
                    "pc": [
                        282,
                        420,
                        721,
                        1126,
                        1162,
                        1188,
                        1445
                    ],
                    "errorMessage": "check self.event_counter exists"
                },
                {
                    "pc": [
                        435,
                        730,
                        1169,
                        1205
                    ],
                    "errorMessage": "check self.events entry exists"
                },
                {
                    "pc": [
                        534
                    ],
                    "errorMessage": "check self.user_bets entry exists"
                },
                {
                    "pc": [
                        255
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        403,
                        705
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        263,
                        392,
                        697,
                        798,
                        1120,
                        1156
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        230,
                        1015
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        538,
                        566,
                        1083
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        413
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEIAiYKDWV2ZW50X2NvdW50ZXIEFR98dQtiZXRfY291bnRlcgZldmVudHMBAAVhZG1pbgIAAARiZXRzCmV2ZW50X2JldHMJdXNlcl9iZXRzMRhAAAsnBTIDZygiZyoiZzEZFEQxGEEAY4INBNujA24Eb3HREQS7VLUkBHs339oEo2X9UQQMI37aBOQ33XMEeI1c+QQXq4FuBKLrxGEENGs9vASm7UzDBB716NU2GgCODQAkALEB4wJHAxwDigOuA8kEggSOBMgE0wTeAIAEiUpxbjYaAI4BAAEANhoBSRWBIBJEJwVMZygiZyoiZyNDNhoBSSJZJQhLARUSRDYaAkkVJBJEMQAiJwVlRBJESRcyBw1EIihlRCMIKEsBZxZJgAIAM1BPAlCAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBPAlArSwJQSbxITL8nCEsBUEm8SCcGv4AOAAxFdmVudENyZWF0ZWRLAVCwKUxQsCNDNhoBRwIVJBJENhoCSU4CSRUjEkQxFiMJSTgQIxJESwIXIihlRA5EK0sDUElOBEm+TE4FREmBEiO6IlMnBCJPAlQiUxREMgdMgQokuhcMREk4CElOBElETDgHMgoSRCIqZUQjCCpLAWcWSU4EMQBPAhZLAk8FUE8CUE8DUExQJwRQJwdPAlBMvycJMQBQSb1FAUEAjkm+RElLA1BMIlkjCBZXBgJcAEsBvEi/JwhLBlBJvkRJSwNQTCJZIwgWVwYCXABLAbxIv0sEIlNBADZLA4ETJLoXIwgWSwNMXBNJgSNbSwMIFlwjRQNLA0m8SEsDv4ALAAlCZXRQbGFjZWRLAVCwI0NLA4EbJLoXIwgWSwNMXBtJgStbSwMIFlwrRQNC/8eAAgABSwJQTEm8SEy/Qv95NhoBSRUkEkQ2GgJJFSMSRDEAIicFZUQSREsBFyIoZUQORCtLAlBJvkRLAYESI7oiUycEIk8CVCJTFESBkAEjVE8CIlOBkQFMVEsBvEi/gA8ADUV2ZW50UmVzb2x2ZWRMULAjQzYaAUcCFSQSREkXIiplRA5EJwdMUEm+TElPAkQxAEsBVxAgEkRJgcgDUycEIk8CVCJTFERJVwgIK0xQSYESI7pJIlMnBCJPAlQiU0RPAoGAA1MnBCJPAlQiU0wjUycEIk8CVCJTSwESREsBgSMkuhdJTgJOA08CgSskuhdJTgNPAghMQQBKSwJLBEmBMVtLAwtPAgpMgcgDI1RLBkmBOSO6IiNUgTlMu7FXECCyB7III7IQIrIBs4ARAA9XaW5uaW5nc0NsYWltZWRLBlCwI0NLAUL/syKAAEk2GgFJFYEgEkQnBkwnCUxQSb1FAUEATEkiJboXRQQiRQNLAksEDEEAOksCJAslCEsBTCS6SUUGFyIqZUQOQQAaJwdLBVC+REsCSU8CUEwiWSMIFlcGAlwARQJLAiMIRQNC/74pSwJQsCNDNhoBSRUkEkRJFyIoZUQORCtMUEmBEyS6TIEbJLpQKUxQsCNDNhoBSRUkEkRJFyIoZUQORCtMUL5EKUxQsCNDIkcCgABHAycGIihlRCMII0lLAgxBAJtJFitMUL5ESwNJIllJTgJFClcCAEUMgAIAAk8CUEUJgABFCiULRQQiRQVLBEsEDEEAG0sJSwVJTgJZJQgWVwYCSwpMUEUKJQhFBUL/3UsJFUUGIkUFSwQlDEEAHEsHSwVJTgJZSwcIFlcGAksKTFBFCiUIRQVC/91LBiMIFlcGAksJUEsKSwVLCFJQSwhXAgBQRQNJIwhFAUL/XilLA1CwI0MyCnMARBYpTFCwI0MxACInBWVETEsBEkQyCnMARDIBCUlEsbIIsgcjshAisgGzgBMAEUVtZXJnZW5jeVdpdGhkcmF3sCNDIicFZUQpTFCwI0MiKGVEFilMULAjQyIqZUQWKUxQsCND",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}